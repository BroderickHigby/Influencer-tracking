{"version":3,"sources":["../src/uniqueArray.js"],"names":["uniqueCountWithSet","arr","Set","size","uniqueCountLegacy","seen","forEach","item","indexOf","push","length","getUniqueCount","requiredUniqueArray","props","propName","componentName","rest","result","array","isRequired","propValue","uniqueCount","RangeError","uniqueArray"],"mappings":";;;;AAAA;;AACA;;;;;;AAEA,SAASA,kBAAT,CAA4BC,GAA5B,EAAiC;AAAE,SAAO,IAAIC,GAAJ,CAAQD,GAAR,EAAaE,IAApB;AAA2B;AAC9D;AACA,SAASC,iBAAT,CAA2BH,GAA3B,EAAgC;AAC9B,MAAMI,OAAO,EAAb;AACAJ,MAAIK,OAAJ,CAAY,UAACC,IAAD,EAAU;AACpB,QAAIF,KAAKG,OAAL,CAAaD,IAAb,MAAuB,CAAC,CAA5B,EAA+B;AAC7BF,WAAKI,IAAL,CAAUF,IAAV;AACD;AACF,GAJD;AAKA,SAAOF,KAAKK,MAAZ;AACD;;AAED,IAAMC,iBAAiB,OAAOT,GAAP,KAAe,UAAf,GAA4BF,kBAA5B,GAAiD,0BAA2BI,iBAAnG;;AAEA,SAASQ,mBAAT,CAA6BC,KAA7B,EAAoCC,QAApC,EAA8CC,aAA9C,EAAsE;AAAA,oCAANC,IAAM;AAANA,QAAM;AAAA;;AACpE,MAAMC,SAASC,iBAAMC,UAAN,0BAAiBN,KAAjB,EAAwBC,QAAxB,EAAkCC,aAAlC,SAAoDC,IAApD,EAAf;AACA,MAAIC,UAAU,IAAd,EAAoB;AAClB,WAAOA,MAAP;AACD;;AAED,MAAMG,YAAYP,MAAMC,QAAN,CAAlB;AACA,MAAMO,cAAcV,eAAeS,SAAf,CAApB;AACA,MAAIC,gBAAgBD,UAAUV,MAA9B,EAAsC;AACpC,WAAO,IAAIY,UAAJ,QAAkBP,aAAlB,mCAA2DK,UAAUV,MAAV,GAAmBW,WAA9E,+BAAP;AACD;AACD,SAAO,IAAP;AACD;;AAED,SAASE,WAAT,CAAqBV,KAArB,EAA4BC,QAA5B,EAA+C;AAC7C,MAAMM,YAAYP,MAAMC,QAAN,CAAlB;AACA,MAAIM,aAAa,IAAjB,EAAuB;AACrB,WAAO,IAAP;AACD;;AAJ4C,qCAANJ,IAAM;AAANA,QAAM;AAAA;;AAM7C,SAAOJ,sCAAoBC,KAApB,EAA2BC,QAA3B,SAAwCE,IAAxC,EAAP;AACD;AACDO,YAAYJ,UAAZ,GAAyBP,mBAAzB;;qBAEe;AAAA,SAAM,gCAAcW,WAAd,EAA2B,aAA3B,CAAN;AAAA,C","file":"uniqueArray.js","sourcesContent":["import { array } from 'prop-types';\nimport wrapValidator from './helpers/wrapValidator';\n\nfunction uniqueCountWithSet(arr) { return new Set(arr).size; }\n/* istanbul ignore next */\nfunction uniqueCountLegacy(arr) {\n  const seen = [];\n  arr.forEach((item) => {\n    if (seen.indexOf(item) === -1) {\n      seen.push(item);\n    }\n  });\n  return seen.length;\n}\n\nconst getUniqueCount = typeof Set === 'function' ? uniqueCountWithSet : /* istanbul ignore next */ uniqueCountLegacy;\n\nfunction requiredUniqueArray(props, propName, componentName, ...rest) {\n  const result = array.isRequired(props, propName, componentName, ...rest);\n  if (result != null) {\n    return result;\n  }\n\n  const propValue = props[propName];\n  const uniqueCount = getUniqueCount(propValue);\n  if (uniqueCount !== propValue.length) {\n    return new RangeError(`${componentName}: values must be unique. ${propValue.length - uniqueCount} duplicate values found.`);\n  }\n  return null;\n}\n\nfunction uniqueArray(props, propName, ...rest) {\n  const propValue = props[propName];\n  if (propValue == null) {\n    return null;\n  }\n\n  return requiredUniqueArray(props, propName, ...rest);\n}\nuniqueArray.isRequired = requiredUniqueArray;\n\nexport default () => wrapValidator(uniqueArray, 'uniqueArray');\n"]}
{"version":3,"sources":["../src/stringStartsWith.js"],"names":["stringStartsWithValidator","start","length","TypeError","validator","stringStartsWith","props","propName","componentName","propValue","rest","stringError","string","startsWith","isRequired","requiredStringStartsWith"],"mappings":";;;qBAGwBA,yB;;AAHxB;;AACA;;;;;;AAEe,SAASA,yBAAT,CAAmCC,KAAnC,EAA0C;AACvD,MAAI,OAAOA,KAAP,KAAiB,QAAjB,IAA6BA,MAAMC,MAAN,KAAiB,CAAlD,EAAqD;AACnD,UAAM,IAAIC,SAAJ,CAAc,gCAAd,CAAN;AACD;;AAED,MAAMC;AAAY,aAASC,gBAAT,CAA0BC,KAA1B,EAAiCC,QAAjC,EAA2CC,aAA3C,EAAmE;AACnF,UAAMC,YAAYH,MAAMC,QAAN,CAAlB;;AAEA,UAAIE,aAAa,IAAjB,EAAuB;AACrB,eAAO,IAAP;AACD;;AALkF,wCAANC,IAAM;AAANA,YAAM;AAAA;;AAOnF,UAAMC,cAAcC,oCAAON,KAAP,EAAcC,QAAd,EAAwBC,aAAxB,SAA0CE,IAA1C,EAApB;AACA,UAAIC,WAAJ,EAAiB;AACf,eAAOA,WAAP;AACD;;AAED,UAAI,CAACF,UAAUI,UAAV,CAAqBZ,KAArB,CAAD,IAAgCQ,UAAUP,MAAV,IAAoBD,MAAMC,MAA9D,EAAsE;AACpE,eAAO,IAAIC,SAAJ,QAAiBK,aAAjB,kBAAmCD,QAAnC,sCAAoEN,KAApE,QAAP;AACD;AACD,aAAO,IAAP;AACD;;AAhBK,WAAqBI,gBAArB;AAAA,KAAN;;AAkBAD,YAAUU,UAAV;AAAuB,aAASC,wBAAT,GAA2C;AAChE,UAAMJ,cAAcC,kBAAOE,UAAP,oCAApB;AACA,UAAIH,WAAJ,EAAiB;AACf,eAAOA,WAAP;AACD;AACD,aAAOP,qCAAP;AACD;;AAND,WAAgCW,wBAAhC;AAAA;;AAQA,SAAO,gCAAcX,SAAd,gCAA8CH,KAA9C,EAAP;AACD","file":"stringStartsWith.js","sourcesContent":["import { string } from 'prop-types';\nimport wrapValidator from './helpers/wrapValidator';\n\nexport default function stringStartsWithValidator(start) {\n  if (typeof start !== 'string' || start.length === 0) {\n    throw new TypeError('a non-empty string is required');\n  }\n\n  const validator = function stringStartsWith(props, propName, componentName, ...rest) {\n    const propValue = props[propName];\n\n    if (propValue == null) {\n      return null;\n    }\n\n    const stringError = string(props, propName, componentName, ...rest);\n    if (stringError) {\n      return stringError;\n    }\n\n    if (!propValue.startsWith(start) || propValue.length <= start.length) {\n      return new TypeError(`${componentName}: ${propName} does not start with \"${start}\"`);\n    }\n    return null;\n  };\n\n  validator.isRequired = function requiredStringStartsWith(...args) {\n    const stringError = string.isRequired(...args);\n    if (stringError) {\n      return stringError;\n    }\n    return validator(...args);\n  };\n\n  return wrapValidator(validator, `stringStartsWith: ${start}`);\n}\n"]}
{"version":3,"sources":["../src/requiredBy.js"],"names":["getRequiredBy","requiredByPropName","propType","defaultValue","requiredBy","props","propName","componentName","propValue","TypeError","rest","isRequired","requiredByRequired"],"mappings":";;;qBAGwBA,a;;AAHxB;;;;AACA;;;;;;AAEe,SAASA,aAAT,CAAuBC,kBAAvB,EAA2CC,QAA3C,EAA0E;AAAA,MAArBC,YAAqB,uEAAN,IAAM;;AACvF,WAASC,UAAT,CAAoBC,KAApB,EAA2BC,QAA3B,EAAqCC,aAArC,EAA6D;AAC3D,QAAIF,MAAMJ,kBAAN,CAAJ,EAA+B;AAC7B,UAAMO,YAAYH,MAAMC,QAAN,CAAlB;AACA,UAAI,2BAAGE,SAAH,EAAcL,YAAd,KAA+B,OAAOK,SAAP,KAAqB,WAAxD,EAAqE;AACnE,eAAO,IAAIC,SAAJ,QACFF,aADE,uBACqBN,kBADrB,qCAC0DK,QAD1D,8BAAP;AAGD;AACF;;AAR0D,sCAANI,IAAM;AAANA,UAAM;AAAA;;AAS3D,WAAOR,2BAASG,KAAT,EAAgBC,QAAhB,EAA0BC,aAA1B,SAA4CG,IAA5C,EAAP;AACD;AACDN,aAAWO,UAAX;AAAwB,aAASC,kBAAT,CAA4BP,KAA5B,EAAmCC,QAAnC,EAA6CC,aAA7C,EAAqE;AAC3F,UAAMC,YAAYH,MAAMC,QAAN,CAAlB;AACA,UAAI,2BAAGE,SAAH,EAAcL,YAAd,CAAJ,EAAiC;AAC/B,eAAO,IAAIM,SAAJ,QAAiBF,aAAjB,6BAAyCD,QAAzC,8BAAP;AACD;;AAJ0F,yCAANI,IAAM;AAANA,YAAM;AAAA;;AAK3F,aAAOR,SAASS,UAAT,kBAAoBN,KAApB,EAA2BC,QAA3B,EAAqCC,aAArC,SAAuDG,IAAvD,EAAP;AACD;;AAND,WAAiCE,kBAAjC;AAAA;;AAQA,SAAO,gCACLR,UADK,+BAEUH,kBAFV,cAGL,CAACA,kBAAD,EAAqBE,YAArB,CAHK,CAAP;AAKD","file":"requiredBy.js","sourcesContent":["import is from 'object-is';\nimport wrapValidator from './helpers/wrapValidator';\n\nexport default function getRequiredBy(requiredByPropName, propType, defaultValue = null) {\n  function requiredBy(props, propName, componentName, ...rest) {\n    if (props[requiredByPropName]) {\n      const propValue = props[propName];\n      if (is(propValue, defaultValue) || typeof propValue === 'undefined') {\n        return new TypeError(\n          `${componentName}: when ${requiredByPropName} is true, prop “${propName}” must be present.`,\n        );\n      }\n    }\n    return propType(props, propName, componentName, ...rest);\n  }\n  requiredBy.isRequired = function requiredByRequired(props, propName, componentName, ...rest) {\n    const propValue = props[propName];\n    if (is(propValue, defaultValue)) {\n      return new TypeError(`${componentName}: prop “${propName}” must be present.`);\n    }\n    return propType.isRequired(props, propName, componentName, ...rest);\n  };\n\n  return wrapValidator(\n    requiredBy,\n    `requiredBy “${requiredByPropName}”`,\n    [requiredByPropName, defaultValue],\n  );\n}\n"]}